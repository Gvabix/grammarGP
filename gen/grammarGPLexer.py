# Generated from C:/Users/emili/Desktop/gene2/grammarGP/grammarGP.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,4,12,101,8,12,11,12,12,12,102,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,
        28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,5,
        32,186,8,32,10,32,12,32,189,9,32,1,33,4,33,192,8,33,11,33,12,33,
        193,1,33,1,33,1,34,4,34,199,8,34,11,34,12,34,200,1,35,4,35,204,8,
        35,11,35,12,35,205,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,0,1,0,3,3,0,9,10,13,
        13,32,32,1,0,48,57,3,0,65,90,95,95,97,122,213,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,75,1,0,
        0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,
        0,0,0,13,87,1,0,0,0,15,89,1,0,0,0,17,91,1,0,0,0,19,93,1,0,0,0,21,
        95,1,0,0,0,23,97,1,0,0,0,25,100,1,0,0,0,27,104,1,0,0,0,29,108,1,
        0,0,0,31,111,1,0,0,0,33,116,1,0,0,0,35,122,1,0,0,0,37,127,1,0,0,
        0,39,133,1,0,0,0,41,139,1,0,0,0,43,148,1,0,0,0,45,151,1,0,0,0,47,
        154,1,0,0,0,49,158,1,0,0,0,51,164,1,0,0,0,53,167,1,0,0,0,55,170,
        1,0,0,0,57,172,1,0,0,0,59,174,1,0,0,0,61,177,1,0,0,0,63,180,1,0,
        0,0,65,182,1,0,0,0,67,191,1,0,0,0,69,198,1,0,0,0,71,203,1,0,0,0,
        73,207,1,0,0,0,75,76,5,44,0,0,76,2,1,0,0,0,77,78,5,46,0,0,78,4,1,
        0,0,0,79,80,5,40,0,0,80,6,1,0,0,0,81,82,5,41,0,0,82,8,1,0,0,0,83,
        84,5,123,0,0,84,10,1,0,0,0,85,86,5,125,0,0,86,12,1,0,0,0,87,88,5,
        43,0,0,88,14,1,0,0,0,89,90,5,45,0,0,90,16,1,0,0,0,91,92,5,42,0,0,
        92,18,1,0,0,0,93,94,5,47,0,0,94,20,1,0,0,0,95,96,5,61,0,0,96,22,
        1,0,0,0,97,98,5,59,0,0,98,24,1,0,0,0,99,101,3,73,36,0,100,99,1,0,
        0,0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,26,1,0,0,
        0,104,105,3,25,12,0,105,106,3,3,1,0,106,107,3,25,12,0,107,28,1,0,
        0,0,108,109,5,105,0,0,109,110,5,102,0,0,110,30,1,0,0,0,111,112,5,
        101,0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,
        32,1,0,0,0,116,117,5,119,0,0,117,118,5,104,0,0,118,119,5,105,0,0,
        119,120,5,108,0,0,120,121,5,101,0,0,121,34,1,0,0,0,122,123,5,114,
        0,0,123,124,5,101,0,0,124,125,5,97,0,0,125,126,5,100,0,0,126,36,
        1,0,0,0,127,128,5,119,0,0,128,129,5,114,0,0,129,130,5,105,0,0,130,
        131,5,116,0,0,131,132,5,101,0,0,132,38,1,0,0,0,133,134,5,98,0,0,
        134,135,5,114,0,0,135,136,5,101,0,0,136,137,5,97,0,0,137,138,5,107,
        0,0,138,40,1,0,0,0,139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,
        110,0,0,142,143,5,116,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,
        146,5,117,0,0,146,147,5,101,0,0,147,42,1,0,0,0,148,149,5,38,0,0,
        149,150,5,38,0,0,150,44,1,0,0,0,151,152,5,124,0,0,152,153,5,124,
        0,0,153,46,1,0,0,0,154,155,5,105,0,0,155,156,5,110,0,0,156,157,5,
        116,0,0,157,48,1,0,0,0,158,159,5,102,0,0,159,160,5,108,0,0,160,161,
        5,111,0,0,161,162,5,97,0,0,162,163,5,116,0,0,163,50,1,0,0,0,164,
        165,5,61,0,0,165,166,5,61,0,0,166,52,1,0,0,0,167,168,5,33,0,0,168,
        169,5,61,0,0,169,54,1,0,0,0,170,171,5,60,0,0,171,56,1,0,0,0,172,
        173,5,62,0,0,173,58,1,0,0,0,174,175,5,60,0,0,175,176,5,61,0,0,176,
        60,1,0,0,0,177,178,5,62,0,0,178,179,5,61,0,0,179,62,1,0,0,0,180,
        181,5,33,0,0,181,64,1,0,0,0,182,187,3,71,35,0,183,186,3,71,35,0,
        184,186,3,69,34,0,185,183,1,0,0,0,185,184,1,0,0,0,186,189,1,0,0,
        0,187,185,1,0,0,0,187,188,1,0,0,0,188,66,1,0,0,0,189,187,1,0,0,0,
        190,192,7,0,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,
        193,194,1,0,0,0,194,195,1,0,0,0,195,196,6,33,0,0,196,68,1,0,0,0,
        197,199,7,1,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,
        200,201,1,0,0,0,201,70,1,0,0,0,202,204,7,2,0,0,203,202,1,0,0,0,204,
        205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,72,1,0,0,0,207,208,
        7,1,0,0,208,74,1,0,0,0,7,0,102,185,187,193,200,205,1,6,0,0
    ]

class grammarGPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMA = 1
    DOT = 2
    LPAREN = 3
    RPAREN = 4
    LBRACE = 5
    RBRACE = 6
    PLUS = 7
    MINUS = 8
    TIMES = 9
    DIV = 10
    ASSIGN = 11
    SEMI = 12
    INTEGER_LITERAL = 13
    FLOAT_LITERAL = 14
    IF = 15
    ELSE = 16
    WHILE = 17
    READ = 18
    WRITE = 19
    BREAK = 20
    CONTINUE = 21
    AND = 22
    OR = 23
    INT = 24
    FLOAT = 25
    EQ = 26
    NE = 27
    LT = 28
    GT = 29
    LE = 30
    GE = 31
    NOT = 32
    IDENTIFIER = 33
    WS = 34
    DIGIT = 35
    LETTER = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'.'", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", 
            "'/'", "'='", "';'", "'if'", "'else'", "'while'", "'read'", 
            "'write'", "'break'", "'continue'", "'&&'", "'||'", "'int'", 
            "'float'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", 
            "MINUS", "TIMES", "DIV", "ASSIGN", "SEMI", "INTEGER_LITERAL", 
            "FLOAT_LITERAL", "IF", "ELSE", "WHILE", "READ", "WRITE", "BREAK", 
            "CONTINUE", "AND", "OR", "INT", "FLOAT", "EQ", "NE", "LT", "GT", 
            "LE", "GE", "NOT", "IDENTIFIER", "WS", "DIGIT", "LETTER" ]

    ruleNames = [ "COMMA", "DOT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "PLUS", "MINUS", "TIMES", "DIV", "ASSIGN", "SEMI", "INTEGER_LITERAL", 
                  "FLOAT_LITERAL", "IF", "ELSE", "WHILE", "READ", "WRITE", 
                  "BREAK", "CONTINUE", "AND", "OR", "INT", "FLOAT", "EQ", 
                  "NE", "LT", "GT", "LE", "GE", "NOT", "IDENTIFIER", "WS", 
                  "DIGIT", "LETTER", "DEC_DIGIT" ]

    grammarFileName = "grammarGP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


